{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c5344bca.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const { name, email, id } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?150x150`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"tc bg-light-blue br3 pa3 \"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"2px solid black\",\r\n        height: \"700px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Random-Robo</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />;\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, { type, payload }) => {\r\n  switch (type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (\r\n  state = initialStateRobots,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots,\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}